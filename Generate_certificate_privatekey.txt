# Command to generate the PEM encoded Private Key without passphrase and Certificate

openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout example.key -out example.crt -subj "/CN=example.com" -days 3650


# The following command creates a relatively strong (as of 2016) certificate for the domain example.com that is valid for 3650 days (~10 years). It saves the private key and certificate into the files example.key and example.crt
 
# Since it is a self-signed certificate that has to be accepted by users manually, it doesn't make sense to use a short expiration or weak crypto.
# In the future, you might want to use more than 4096 bits for the RSA key and a hash algorithm stronger than sha256, but as of 2016 these are sane values. They are sufficiently strong while being supported by all modern browsers.
# Note that theoretically you could leave out the -nodes parameter (which means "no DES encryption"), in which case example.key would be encrypted with a password. However, this is almost never useful for a server installation, because it means that you either have to store the password on the server as well, or that you have to enter it manually on each reboot.

# Sample with explanation
openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days XXX
# req
# PKCS#10 certificate request and certificate generating utility.
# -x509
# this option outputs a self signed certificate instead of a certificate request. This is typically used to generate a test certificate or a self signed root CA.
# -newkey arg
# this option creates a new certificate request and a new private key. The argument takes one of several forms. rsa:nbits, where nbits is the number of bits, generates an RSA key nbits in size.
# -keyout filename
# this gives the filename to write the newly created private key to.
# -out filename
# This specifies the output filename to write to or standard output by default.
# -days n
# when the -x509 option is being used this specifies the number of days to certify the certificate for. The default is 30 days.
# -nodes
# if this option is specified then if a private key is created it will not be encrypted.
